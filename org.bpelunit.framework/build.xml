<?xml version="1.0" encoding="UTF-8"?>
<project name="org.bpelunit.framework" default="build.jars" basedir=".">
	
	<!--
	
		This script builds the BPELUnit framework. The environment variable
		${xmlbeans.home} must be specified and point to the XBeans installation
		directory.
	
	-->

	<property name="basews" value="${ws}"/>
	<property name="baseos" value="${os}"/>
	<property name="basearch" value="${arch}"/>
	<property name="basenl" value="${nl}"/>

	<!-- Compiler settings. -->
	<property name="javacFailOnError" value="false"/>
	<property name="javacDebugInfo" value="on"/>
	<property name="javacVerbose" value="false"/>
	<property name="logExtension" value=".log"/>
	<property name="compilerArg" value=""/>
	<property name="javacSource" value="1.5"/><!--Ã„nderung 1.3->1.5-->
	<property name="javacTarget" value="1.2"/>
	<path id="path_bootclasspath">
		<fileset dir="${java.home}/lib">
			<include name="*.jar"/>
		</fileset>
	</path>
	<property name="bootclasspath" refid="path_bootclasspath"/>
	<property name="bundleJavacSource" value="${javacSource}"/>
	<property name="bundleJavacTarget" value="${javacTarget}"/>
	<property name="bundleBootClasspath" value="${bootclasspath}"/>

	<target name="init" depends="properties">
		<condition property="pluginTemp" value="${buildTempFolder}/plugins">
			<isset property="buildTempFolder"/>
		</condition>
		<property name="pluginTemp" value="${basedir}"/>
		<condition property="build.result.folder" value="${pluginTemp}/org.bpelunit.framework">
			<isset property="buildTempFolder"/>
		</condition>
		<property name="build.result.folder" value="${basedir}"/>
		<property name="temp.folder" value="${basedir}/temp.folder"/>
		<property name="plugin.destination" value="${basedir}"/>
	</target>

	<target name="properties" if="eclipse.running">
		<property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>

	</target>

	<target name="build.update.jar" depends="init" description="Build the plug-in: org.bpelunit.framework for an update site.">
		<delete dir="${temp.folder}"/>
		<mkdir dir="${temp.folder}"/>
		<antcall target="build.jars"/>
		<antcall target="gather.bin.parts">
			<param name="destination.temp.folder" value="${temp.folder}/"/>
		</antcall>
		<zip destfile="${plugin.destination}/org.bpelunit.framework_1.0.0.jar" basedir="${temp.folder}/org.bpelunit.framework_1.0.0" filesonly="false" whenempty="skip" update="false"/>
		<delete dir="${temp.folder}"/>
	</target>

	<target name="framework.jar" depends="init" unless="framework.jar" description="Create jar: org.bpelunit.framework framework.jar.">
		<delete dir="${temp.folder}/framework.jar.bin"/>
		<mkdir dir="${temp.folder}/framework.jar.bin"/>
		<path id="framework.jar.classpath">
			<pathelement path="lib/activation.jar"/>
			<pathelement path="${build.result.folder}/../org.bpelunit.framework/lib/activation.jar"/>
			<pathelement path="lib/commons-codec-1.3.jar"/>
			<pathelement path="${build.result.folder}/../org.bpelunit.framework/lib/commons-codec-1.3.jar"/>
			<pathelement path="lib/commons-httpclient-3.0.1.jar"/>
			<pathelement path="${build.result.folder}/../org.bpelunit.framework/lib/commons-httpclient-3.0.1.jar"/>
			<pathelement path="lib/commons-io-1.2.jar"/>
			<pathelement path="${build.result.folder}/../org.bpelunit.framework/lib/commons-io-1.2.jar"/>
			<pathelement path="lib/commons-lang-2.1.jar"/>
			<pathelement path="${build.result.folder}/../org.bpelunit.framework/lib/commons-lang-2.1.jar"/>
			<pathelement path="lib/commons-logging.jar"/>
			<pathelement path="${build.result.folder}/../org.bpelunit.framework/lib/commons-logging.jar"/>
			<pathelement path="lib/javax.servlet.jar"/>
			<pathelement path="${build.result.folder}/../org.bpelunit.framework/lib/javax.servlet.jar"/>
			<pathelement path="lib/jsr173_1.0_api.jar"/>
			<pathelement path="${build.result.folder}/../org.bpelunit.framework/lib/jsr173_1.0_api.jar"/>
			<pathelement path="lib/log4j-1.2.13.jar"/>
			<pathelement path="${build.result.folder}/../org.bpelunit.framework/lib/log4j-1.2.13.jar"/>
			<pathelement path="lib/org.mortbay.jetty.jar"/>
			<pathelement path="${build.result.folder}/../org.bpelunit.framework/lib/org.mortbay.jetty.jar"/>
			<pathelement path="lib/qname-wsdl4j-1.5.2.jar"/>
			<pathelement path="${build.result.folder}/../org.bpelunit.framework/lib/qname-wsdl4j-1.5.2.jar"/>
			<pathelement path="lib/saaj-1.3_api.jar"/>
			<pathelement path="${build.result.folder}/../org.bpelunit.framework/lib/saaj-1.3_api.jar"/>
			<pathelement path="lib/saaj-1.3_impl.jar"/>
			<pathelement path="${build.result.folder}/../org.bpelunit.framework/lib/saaj-1.3_impl.jar"/>
			<pathelement path="lib/wsdl4j-1.6.2.jar"/>
			<pathelement path="${build.result.folder}/../org.bpelunit.framework/lib/wsdl4j-1.6.2.jar"/>
			<pathelement path="lib/xbean.jar"/>
			<pathelement path="${build.result.folder}/../org.bpelunit.framework/lib/xbean.jar"/>
			<!--hier-->
			<pathelement path="lib/jdom.jar"/>
			<pathelement path="${build.result.folder}/../org.bpelunit.framework/lib/jdom.jar"/>
			<pathelement path="lib/truezip-6.jar"/>
			<pathelement path="${build.result.folder}/../org.bpelunit.framework/lib/truezip-6.jar"/>
		</path>
		
		<!-- create the XML schema -->
		
		<property name="src-dir" location="${temp.folder}/xbeans.temp.src" />
		<property name="bin-dir" location="${temp.folder}/framework.jar.bin"/>
		
	
		<ant antfile="buildXMLModel.xml"> </ant>
		
		<!-- compile the source code -->
		<javac destdir="${temp.folder}/framework.jar.bin" failonerror="${javacFailOnError}" verbose="${javacVerbose}" debug="${javacDebugInfo}" includeAntRuntime="no" bootclasspath="${bundleBootClasspath}" source="${bundleJavacSource}" target="${bundleJavacTarget}"		>
			<compilerarg line="${compilerArg}" compiler="${build.compiler}"/>
			<classpath refid="framework.jar.classpath" />
			<src path="src/"			/>
			<compilerarg line="-log '${temp.folder}/framework.jar.bin${logExtension}'" compiler="org.eclipse.jdt.core.JDTCompilerAdapter"/>
		</javac>
		<!-- Copy necessary resources -->
		<copy todir="${temp.folder}/framework.jar.bin" failonerror="true" overwrite="false">
			<fileset dir="src/" excludes="**/*.java, **/package.htm*"			/>
		</copy>
		<mkdir dir="${build.result.folder}"/>
		<jar destfile="${build.result.folder}/framework.jar" basedir="${temp.folder}/framework.jar.bin"/>
		<delete dir="${temp.folder}/framework.jar.bin"/>
		<delete dir="${temp.folder}/xbeans.temp.src"/>
	</target>

	<target name="frameworksrc.zip" depends="init" unless="frameworksrc.zip">
		<mkdir dir="${build.result.folder}"/>
		<zip destfile="${build.result.folder}/frameworksrc.zip" filesonly="false" whenempty="skip" update="false">
			<fileset dir="src/" includes="**/*.java"			/>
		</zip>
	</target>

	<target name="build.jars" depends="init" description="Build all the jars for the plug-in: org.bpelunit.framework.">
		<available property="framework.jar" file="${build.result.folder}/framework.jar"/>
		<antcall target="framework.jar"/>
	</target>

	<target name="build.sources" depends="init">
		<available property="frameworksrc.zip" file="${build.result.folder}/frameworksrc.zip"/>
		<antcall target="frameworksrc.zip"/>
	</target>

	<target name="gather.bin.parts" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/org.bpelunit.framework_1.0.0"/>
		<copy todir="${destination.temp.folder}/org.bpelunit.framework_1.0.0" failonerror="true" overwrite="false">
			<fileset dir="${build.result.folder}" includes="framework.jar"			/>
		</copy>
		<copy todir="${destination.temp.folder}/org.bpelunit.framework_1.0.0" failonerror="true" overwrite="false">
			<!--hier-->
			<fileset dir="${basedir}" includes="META-INF/,framework.jar,conf/,schema/,lib/activation.jar,lib/commons-codec-1.3.jar,lib/commons-httpclient-3.0.1.jar,lib/commons-io-1.2.jar,lib/commons-lang-2.1.jar,lib/commons-logging.jar,lib/javax.servlet.jar,lib/jsr173_1.0_api.jar,lib/log4j-1.2.13.jar,lib/org.mortbay.jetty.jar,lib/qname-wsdl4j-1.5.2.jar,lib/saaj-1.3_api.jar,lib/saaj-1.3_impl.jar,lib/wsdl4j-1.6.2.jar,lib/xbean.jar,lib/jdom.jar,lib/truezip-6.jar,README,LICENSE"			/>
		</copy>
	</target>

	<target name="build.zips" depends="init">
	</target>

	<target name="gather.sources" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/org.bpelunit.framework_1.0.0"/>
		<copy file="${build.result.folder}/frameworksrc.zip" todir="${destination.temp.folder}/org.bpelunit.framework_1.0.0" failonerror="false" overwrite="false"/>
	</target>

	<target name="gather.logs" depends="init" if="destination.temp.folder">
		<mkdir dir="${destination.temp.folder}/org.bpelunit.framework_1.0.0"/>
		<copy file="${temp.folder}/framework.jar.bin${logExtension}" todir="${destination.temp.folder}/org.bpelunit.framework_1.0.0" failonerror="false" overwrite="false"/>
	</target>

	<target name="clean" depends="init" description="Clean the plug-in: org.bpelunit.framework of all the zips, jars and logs created.">
		<delete file="${build.result.folder}/framework.jar"/>
		<delete file="${build.result.folder}/frameworksrc.zip"/>
		<delete file="${plugin.destination}/org.bpelunit.framework_1.0.0.jar"/>
		<delete file="${plugin.destination}/org.bpelunit.framework_1.0.0.zip"/>
		<delete dir="${temp.folder}"/>
	</target>

	<target name="refresh" depends="init" if="eclipse.running" description="Refresh this folder.">
		<eclipse.convertPath fileSystemPath="D:/java/bpelunitws/org.bpelunit.framework" property="resourcePath"/>
		<eclipse.refreshLocal resource="${resourcePath}" depth="infinite"/>
	</target>

	<target name="zip.plugin" depends="init" description="Create a zip containing all the elements for the plug-in: org.bpelunit.framework.">
		<delete dir="${temp.folder}"/>
		<mkdir dir="${temp.folder}"/>
		<antcall target="build.jars"/>
		<antcall target="build.sources"/>
		<antcall target="gather.bin.parts">
			<param name="destination.temp.folder" value="${temp.folder}/"/>
		</antcall>
		<antcall target="gather.sources">
			<param name="destination.temp.folder" value="${temp.folder}/"/>
		</antcall>
		<delete>
			<fileset dir="${temp.folder}" includes="**/*.bin${logExtension}"			/>
		</delete>
		<zip destfile="${plugin.destination}/org.bpelunit.framework_1.0.0.zip" basedir="${temp.folder}" filesonly="true" whenempty="skip" update="false"/>
		<delete dir="${temp.folder}"/>
	</target>

</project>
